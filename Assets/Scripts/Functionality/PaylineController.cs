using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.UI.Extensions;

public class PaylineController : MonoBehaviour
{
    [SerializeField] private int x_Distance;
    [SerializeField] private int y_Distance;

    [SerializeField] private Transform LineContainer;
    [SerializeField] private GameObject Line_Prefab;

    [SerializeField] private List<PaylineBtnView> paylineButtons;
    [SerializeField] private List<TMP_Text> payline_texts;
    // [SerializeField] private TMP_Text[] right_payline_texts;
    [SerializeField] private Vector2 InitialLinePosition = new Vector2(-315, 100);

    GameObject TempObj = null;

    void Start(){

        SetButtons();
        GeneratePayline();

    }
    //generate lines at runtime accordingly
    internal void GeneratePayoutLinesBackend(List<int> y_index, int Count, bool isStatic = false)
    {
        y_index=new List<int>{1,1,1,1,1};
        GameObject MyLineObj = Instantiate(Line_Prefab, LineContainer);
        MyLineObj.transform.localPosition = new Vector2(InitialLinePosition.x, InitialLinePosition.y);
        UILineRenderer MyLine = MyLineObj.GetComponent<UILineRenderer>();

        for (int i = 0; i < 5; i++)
        {
            var points = new Vector2() { x = i * x_Distance, y = y_index[i] * -y_Distance };
            var pointlist = new List<Vector2>(MyLine.Points);
            pointlist.Add(points);
            MyLine.Points = pointlist.ToArray();
        }
        var newpointlist = new List<Vector2>(MyLine.Points);
        newpointlist.RemoveAt(0);
        MyLine.Points = newpointlist.ToArray();

        if (isStatic)
        {
            TempObj = MyLineObj;
        }
    }

    internal void GeneratePayline()
    {
        List<int> y_index=new List<int>{1,1,1,1,1,1};
        GameObject MyLineObj = Instantiate(Line_Prefab, LineContainer);
        UILineRenderer MyLine = MyLineObj.GetComponent<UILineRenderer>();
        MyLineObj.transform.localPosition = new Vector2(InitialLinePosition.x, InitialLinePosition.y);

        for (int i = 1; i < y_index.Count; i++)
        {
            var points = new Vector2() { x = (i)* x_Distance, y = y_index[i-1] * -y_Distance };
            var pointlist = new List<Vector2>(MyLine.Points);
            pointlist.Add(points);
            MyLine.Points = pointlist.ToArray();
        }
        var newpointlist = new List<Vector2>(MyLine.Points);
        // newpointlist.RemoveAt(0);
        MyLine.Points = newpointlist.ToArray();


    }

    //delete the line generated by button hover
    internal void ResetStaticLine()
    {
        if(TempObj!=null)
        {
            Destroy(TempObj);
            TempObj = null;
        }
    }

    //delete all lines
    internal void ResetLines()
    {
        foreach (Transform child in LineContainer)
        {
            Destroy(child.gameObject);
        }
    }

    internal void SetButtons(){

        int count = paylineButtons.Count;

        for (int i = 0; i < count; i++)
        {
            // Get a random index from the remaining elements
            int randomIndex = Random.Range(i, count);
            (paylineButtons[i], paylineButtons[randomIndex]) = (paylineButtons[randomIndex], paylineButtons[i]);

        }

        for (int i = 0; i < count; i++)
        {
            paylineButtons[i].SetIdAndText(i+1);
        }

    }

}
